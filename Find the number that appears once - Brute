// Find the number that appears once, and the other numbers twice - Brute
/*
    Intuition: For every element present in the array, we will do a linear search and count the occurrence. 
    If for any element, the occurrence is 1, we will return it.
*/
#include<bits/stdc++.h>
using namespace std;
int AppearOnce(vector<int> &arr, int n)
{
    for(int i = 0 ; i < n ; i++){                // O(N) when single occurnace element present at n-1 pos
        int count = 0;
        for(int j = 0 ; j < n ; j++){            // O(N)
            if(arr[i] == arr[j]){
                count++;
            }
        }
        if(count == 1){
            return arr[i];
        }
    }
}
int main()
{
    vector<int> arr = {4,1,2,1,2};
    cout<<AppearOnce(arr,arr.size());
}


// TC = O(N^2)
// SC = O(1)


/*
    Time Complexity: O(N^2), where N = size of the given array.
    Reason: For every element, we are performing a linear search to count its occurrence. 
    The linear search takes O(N) time complexity. And there are N elements in the array. 
    So, the total time complexity will be O(N^2).
    Space Complexity: O(1) as we are not using any extra space.
*/
