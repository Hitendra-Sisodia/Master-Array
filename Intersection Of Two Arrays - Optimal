// Intersection of two array - Optimal
#include<bits/stdc++.h>
using namespace std;

vector<int> IntersectionOfArrays(vector<int> arr1, vector<int> arr2, int n1,int n2)
{
    int i = 0;
    int j = 0;
    vector<int> ans;
    while(i < n1 && j < n2){
        // if current element in i is smaller
        if(arr1[i] < arr2[j]){
            i++;
        }
        // if current element j is smaller
        else if(arr2[j] < arr1[i]){
            j++;
        }
        else{
            ans.push_back(arr1[i]);
            i++;
            j++;
        }
    }
    return ans;
}
int main()
{
    vector<int> arr1 = {3,3,5};
    vector<int> arr2 = {1,2,3,3,4,5,6};
    vector<int> ans = IntersectionOfArrays(arr1,arr2,arr1.size() ,arr2.size());
    for(auto it : ans){
        cout<<it<<" ";
    }
}


// TC = O(N1 + N2) when both i and j pointer move one by one 
// SC = O(1) + O(X)[Optional] is used for returing answer

/*
    Time Complexity: O(n) { Since the elements are compared within the single pass for 
    both the arrays this approach would take a linear time and in the worst case O(n1+n2) 
    where n1 = A.size() and n2 = B.size() }.
    Space Complexity: O(1) { There is no extra space used in the two-pointers approach }.
*/
