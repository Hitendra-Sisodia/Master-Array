// Union of two arrays - Brute(Set)
#include<bits/stdc++.h>
using namespace std;
vector<int> Union(vector<int> arr1, vector<int> arr2, int n1,int n2)
{
    set<int> s;                         // O(N1 + N2)
    vector<int> u;                      // O(N1 + N2) used to return answer
    for(int i = 0 ; i < n1; i++){                  // O(N1 logN) N indicates that size of set is not fixed that increasing at each step
        s.insert(arr1[i]);
    }
    for(int i = 0 ; i < n2 ; i++){                 // O(N2 logN)
        s.insert(arr2[i]);
    }
    for(auto it: s){                               // O(N1 + N2)  when both array contain unique elements
        u.push_back(it);
    }
    return u;
}
int main()
{
    vector<int> arr1 = {1,2,3,4,5,6,7,8,9,10};
    vector<int> arr2 = {2,3,4,4,5,11,12};
    vector<int> ans = Union(arr1,arr2,arr1.size(), arr2.size());
    for(auto it: ans){
        cout<<it<<" ";
    }
}


// TC = O(N1 logN) + O(N2 logN) + O(N1 + N2)
// SC = O(N1 + N2) 

/*
    Time Compleixty : O( (m+n)log(m+n) ) . Inserting a key in set takes logN times, 
    where N is no of elements in set. At max set can store m+n elements 
    {when there are no common elements and elements in arr,arr2 are distntict}. 
    So Inserting m+n th element takes log(m+n) time. Upon approximation across 
    insertion of all elements in worst it would take O((m+n)log(m+n) time.
*/
